library(datapasta)
library(reprex)
library(datapasta)
library(reprex)
install.packages("datapasta")
install.packages("reprex")
library(datapasta)
library(reprex)
install.packages("addinslist")
library(datapasta)
library(reprex)
library(addinslist)
library(datapasta)
library(reprex)
library(addinslist)
devtools::install_github("rstudio/addinexamples", type = "source")
library(gdata)
install.packages("gdata")
library(gdata)
help(read.xls)
setwd("~/UR-2017/Big Data_ Machine Learning/2019-1/Clase 1")
ejemplo_excel = read.xls("mydata.xls")
ejemplo_excel = read.xls("ejemplo_excel.xls")
ejemplo_excel = read.xls("ejemplo_excel.xlsx")
read.xls("ejemplo_excel.xlsx")
install.packages("XLConnect")
library(XLConnect)
ejemplo_excel = loadWorkbook("ejemplo_excel.xlsx")
df = readWorksheet(ejemplo_excel, sheet="datos")
View(df)
df2 = read.csv("ejemplo.csv")
df2 = read.csv("ejemplo_csv.csv")
View(df2)
df2 = read.csv("ejemplo_csv.csv", sep = ";")
View(df2)
vector1 = (1,2,3)
library(fortunes)
install.packages("fortunes")
library(fortunes)
fortune()
x <- 8
x <- 8
b <- c("s","fg","rt","io")
setwd("~/UR-2017/Big Data_ Machine Learning/2019-1/Clase 1")
save(b, file = "objetos_monitoria1.RData")
save(b,x, file = "objetos_monitoria2.RData")
c <- TRUE
save.image(file = "objetos_monitoria3.RData") # creating ".RData" in current working directory
load("objetos_monitoria1.RData")
load("objetos_monitoria2.RData")
load("objetos_monitoria3.RData")
library(XLConnect)
ejemplo_excel = loadWorkbook("ejemplo_excel.xlsx")
df = readWorksheet(ejemplo_excel, sheet="datos")
View(df)
View(ejemplo_excel)
View(ejemplo_excel)
df2 = read.csv("ejemplo_csv.csv")
View(df2)
df2 = read.csv("ejemplo_csv.csv", sep = ";")
View(df2)
setwd("~/UR-2017/Big Data_ Machine Learning/2019-1/Clase 3")
init = c(0,1)
len <- 100
fibvals <- numeric(len)
fibvals[1] <- 0
fibvals[2] <- 1
for (i in 3:len) {
fibvals[i] <- fibvals[i-1]+fibvals[i-2]
}
fib_even = logical(len)
for (i in 1:len){
if (fibvals[i] %% 2 == 0){
fib_even[i] = TRUE
} else{
fib_even[i] = TRUE
}
}
fibvals[2]
fibvals[2] %% 2
fib_even = logical(len)
for (i in 1:len){
if ((fibvals[i] %% 2) == 0){
fib_even[i] = TRUE
} else{
fib_even[i] = TRUE
}
}
warnings()
fibvals[4] %% 2
for (i in 1:len){
if ((fibvals[i] %% 2) == 0){
fib_even[i] = TRUE
} else{
fib_even[i] = TRUE
}
}
fib_even
(fibvals[i] %% 2) == 0
1:len
i = 1
(fibvals[i] %% 2) == 0
(fibvals[i] %% 2) == 0.0
(fibvals[i] % 2) == 0.0
fibvals[i]
fib_even = logical(len)
for (i in 1:len){
if ((fibvals[i] %% 2) == 0){
fib_even[i] = TRUE
} else{
fib_even[i] = FALSE
}
}
ifelse(fibvals %% 2 == 0,"even","odd")
install.packages("schoolmath")
library(schoolmath)
prime.factor(66)
x = prime.factor(66)
fibvals
fibvals[100]
valores = sample(1:100, 100, replace=TRUE)
valores
normalizar <- function(vec){
media = mean(vec)
dev   = sd(vec)
result = numeric(length(vec))
for (i in 1:length(vec)){
result[i] = (vec[i] - media)/dev
}
return(result)
}
normalizar(valores)
num_neg <- function(vec){
normalized <- normalizar(vec)
output = lenght(normalized[normalized < 0])
}
num_neg(vec)
num_neg(valores)
num_neg <- function(vec){
normalized <- normalizar(vec)
output = length(normalized[normalized < 0])
}
num_neg(valores)
valores[valores < 0]
valores[c(valores < 0)]
valores[c(valores < 40)]
num_neg <- function(vec){
normalized <- normalizar(vec)
output = length(normalized[c(normalized < 0)])
}
num_neg(valores)
normalizar(valores)
x = normalizar(valores)
x[x < 0]
num_neg <- function(vec){
normalized <- normalizar(vec)
output = length(normalized[normalized < 0])
return(output)
}
num_neg(valores)
x = normalizar(valores)
y = x**2
y = x**3
df = data.frame(vec1 = x, vec2 = y)
View(df)
dat = data.frame(vec1 = x, vec2 = y)
ggplot(dat, aes(x=vec1, fill=vec2)) +
geom_histogram(binwidth=.5, alpha=.5, position="identity")
library(ggplot2)
ggplot(dat, aes(x=vec1, fill=vec2)) +
geom_histogram(binwidth=.5, alpha=.5, position="identity")
z = rep(c("A","B"),50)
dat = data.frame(vec1 = x, vec2 = y, class = z)
ggplot(dat, aes(x=vec1, fill=class)) +
geom_histogram(binwidth=.5, alpha=.5, position="identity")
ggplot(dat, aes(x=vec1, fill=class)) +
geom_histogram(binwidth=.05, alpha=.5, position="identity")
ggplot(dat, aes(x=vec1, fill=class)) +
geom_histogram(binwidth=.1, alpha=.5, position="identity")
ggplot(dat, aes(x=vec1, colour=class)) + geom_density()
ggplot(dat, aes(x=vec1, fill=class)) +
geom_histogram(binwidth=.5, position="dodge")
ggplot(dat, aes(x=vec2,fill=class)) + geom_boxplot()
ggplot(dat, aes(x=class, y = vec1, fill=class)) + geom_boxplot()
